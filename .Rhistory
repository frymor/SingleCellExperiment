knitr::opts_chunk$set(echo = TRUE)
counts_matrix <- data.frame(cell_1 = rpois(10, 10),
cell_2 = rpois(10, 10),
cell_3 = rpois(10, 30))
rownames(counts_matrix) <- paste0("gene_", 1:10)
counts_matrix <- as.matrix(counts_matrix) # must be a matrix object!
counts_matrix
sce <- SingleCellExperiment(assays = list(counts = counts_matrix))
library(SingleCellExperiment)
sce <- SingleCellExperiment(assays = list(counts = counts_matrix))
sce
sce <- SingleCellExperiment(assays = list(counts = counts_matrix))
sce
assay(sce, "counts")
counts(sce)
assay(sce, "counts")
sce <- scran::computeSumFactors(sce)
sce <- scater::normalize(sce)
sce <- scran::computeSumFactors(sce)
sce <- scater::normalize(sce)
sce
sce <- SingleCellExperiment(assays = list(counts = counts_matrix))
sce
assay(sce, 'logcounts')
assay(sce, "logcounts")
assays(sce)
sce <- scran::computeSumFactors(sce)
sce <- scater::normalize(sce)
sce
assays(sce)
head(assay(sce, "logcounts"))
assay(sce, "logcounts")
cell_metadata <- data.frame(batch = c(1, 1, 2))
rownames(cell_metadata) <- paste0("cell_", 1:3)
## Appending to existing object (requires DataFrame() coercion)
colData(sce) <- DataFrame(cell_metadata)
sce
colData(sce)
## From scratch:
sce <- SingleCellExperiment(assays = list(counts = counts_matrix),
colData = cell_metadata)
sce
sce <- scater::calculateQCMetrics(sce)
sce
colData(sce)
rowData(sce)[, 1:3]
sce[c("gene_1", "gene_4"), ]
savehistory()
